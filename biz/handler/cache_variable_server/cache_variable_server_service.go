// Code generated by hertz generator.

package cache_variable_server

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	cache_variable_server "qinglin.org/cache_variable/biz/model/cache_variable_server"
	"qinglin.org/cache_variable/biz/http_server/server_handlers"
)

// SetValue .
// @router /set_value [GET]
func SetValue(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cache_variable_server.SetValueReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cache_variable_server.SetValueResp)
	if handlerErr := server_handlers.SetValue(ctx, &req, resp); handlerErr != nil {
		c.String(consts.StatusBadRequest, handlerErr.Error())
	}

	c.JSON(consts.StatusOK, resp)
}

// GetValue .
// @router /get_value [GET]
func GetValue(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cache_variable_server.GetValueReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cache_variable_server.GetValueResp)
	if handlerErr := server_handlers.GetValue(ctx, &req, resp); handlerErr != nil {
		c.String(consts.StatusBadRequest, handlerErr.Error())
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteValue .
// @router /delete_value [GET]
func DeleteValue(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cache_variable_server.DeleteValueReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cache_variable_server.DeleteValueResp)
	if handlerErr := server_handlers.DeleteValue(ctx, &req, resp); handlerErr != nil {
		c.String(consts.StatusBadRequest, handlerErr.Error())
	}
	c.JSON(consts.StatusOK, resp)
}
