// Code generated by thriftgo (0.3.1). DO NOT EDIT.

package cache_variable

import (
	"context"
	"fmt"
)

type GetReq struct {
	// path 注解用来声明 url 中的路由参数
	Key string `thrift:"Key,1" json:"Key" query:"key"`
}

func NewGetReq() *GetReq {
	return &GetReq{}
}

func (p *GetReq) GetKey() (v string) {
	return p.Key
}

func (p *GetReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReq(%+v)", *p)
}

type GetResp struct {
	Value string `thrift:"Value,1" form:"Value" json:"Value" query:"Value"`
}

func NewGetResp() *GetResp {
	return &GetResp{}
}

func (p *GetResp) GetValue() (v string) {
	return p.Value
}

func (p *GetResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResp(%+v)", *p)
}

type SetReq struct {
	// 需要设置的key
	Key string `thrift:"Key,1" json:"Key" query:"key"`
	// 需要设置的value
	Value string `thrift:"Value,2" json:"Value" query:"value"`
	// 过期时间
	Expire int32 `thrift:"Expire,3" json:"Expire" query:"expire"`
}

func NewSetReq() *SetReq {
	return &SetReq{}
}

func (p *SetReq) GetKey() (v string) {
	return p.Key
}

func (p *SetReq) GetValue() (v string) {
	return p.Value
}

func (p *SetReq) GetExpire() (v int32) {
	return p.Expire
}

func (p *SetReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetReq(%+v)", *p)
}

type SetResp struct {
}

func NewSetResp() *SetResp {
	return &SetResp{}
}

func (p *SetResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetResp(%+v)", *p)
}

type DelReq struct {
	// 需要设置的key
	Key string `thrift:"Key,1" json:"Key" query:"key"`
}

func NewDelReq() *DelReq {
	return &DelReq{}
}

func (p *DelReq) GetKey() (v string) {
	return p.Key
}

func (p *DelReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelReq(%+v)", *p)
}

type DelResp struct {
}

func NewDelResp() *DelResp {
	return &DelResp{}
}

func (p *DelResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelResp(%+v)", *p)
}

type CacheVariableService interface {
	// 声明请求的路由
	Get(ctx context.Context, req *GetReq) (r *GetResp, err error)

	Set(ctx context.Context, req *SetReq) (r *SetResp, err error)

	Del(ctx context.Context, req *DelReq) (r *DelResp, err error)
}
